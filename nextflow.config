nextflow.enable.dsl=2

manifest {
  description = 'Prototype scRNA-seq pipeline implemented with Nextflow' 
  author = 'Kane Toh'
  name = 'scRNAseq'
  mainScript = 'main.nf'
  nextflowVersion = '22.04.0'
}

/*
 * Default config options for all environments.
 */

params{
    aligner                       = "kb"
    barcode_whitelist             = false
    chemistry                     = "v3" 
    fasta                         = false
    genome                        = false
    gtf                           = false
    kb_prebuilt                   = false
    kb_index 		 	                = false
    kb_t2g			                  = false
    kb_ref_files                  = "${params.outdir}/reference/kb"
    igenomes_ignore               = false
    input                         = null
    outdir                        = "${projectDir}"
    species			                  = "human"
    tmpdir                        = "./tmp"
    tracedir                      = "${params.outdir}/pipeline_info"
    type                          = "10x"
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev

process {
     withLabel: kb {
        container = 'kanetoh/kb-python:latest'
        errorStrategy = 'retry'
     }
}


docker.enabled = true

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

/* 
 * Defines execution profiles for different environments  
 
profiles{
    docker {
        process.container = 'quay.io/nextflow/rnaseq-nf:v1.1'
        docker.enabled = true
  }

}
*/

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}

trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
